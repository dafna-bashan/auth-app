{"ast":null,"code":"export const storageService = {\n  query,\n  get,\n  post,\n  put,\n  remove\n};\nquery();\nfunction query(entityType, filterBy) {\n  // we need to add the filterBy details. \n  var entities = JSON.parse(localStorage.getItem(entityType)) || [];\n  // if (!entities || !entities.length) {\n  //     entities = boards\n  // }\n  // console.log ('entities =',entities)\n  return Promise.resolve(entities);\n}\nfunction get(entityType, entityId) {\n  return query(entityType).then(entities => entities.find(entity => entity._id === entityId));\n}\nfunction post(entityType, newEntity) {\n  newEntity._id = _makeId();\n  return query(entityType).then(entities => {\n    entities.push(newEntity);\n    _save(entityType, entities);\n    return newEntity;\n  });\n}\nfunction put(entityType, updatedEntity) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\n    entities.splice(idx, 1, updatedEntity);\n    _save(entityType, entities);\n    return updatedEntity;\n  });\n}\nfunction remove(entityType, entityId) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === entityId);\n    entities.splice(idx, 1);\n    _save(entityType, entities);\n  });\n}\nfunction _save(entityType, entities) {\n  localStorage.setItem(entityType, JSON.stringify(entities));\n}\nfunction _makeId() {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}","map":{"version":3,"names":["storageService","query","get","post","put","remove","entityType","filterBy","entities","JSON","parse","localStorage","getItem","Promise","resolve","entityId","then","find","entity","_id","newEntity","_makeId","push","_save","updatedEntity","idx","findIndex","splice","setItem","stringify","length","text","possible","i","charAt","Math","floor","random"],"sources":["/Users/dafi/Desktop/dev/projects/auth-app/frontend/src/services/asyncStorageService.js"],"sourcesContent":["\r\nexport const storageService = {\r\n    query,\r\n    get,\r\n    post,\r\n    put,\r\n    remove,\r\n}\r\nquery()\r\nfunction query(entityType, filterBy) {\r\n    // we need to add the filterBy details. \r\n    var entities = JSON.parse(localStorage.getItem(entityType)) || []\r\n    // if (!entities || !entities.length) {\r\n    //     entities = boards\r\n    // }\r\n    // console.log ('entities =',entities)\r\n    return Promise.resolve(entities)\r\n}\r\n\r\nfunction get(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => entities.find(entity => entity._id === entityId))\r\n}\r\n\r\nfunction post(entityType, newEntity) {\r\n    newEntity._id = _makeId()\r\n    return query(entityType)\r\n        .then(entities => {\r\n            entities.push(newEntity)\r\n            _save(entityType, entities)\r\n            return newEntity\r\n        })\r\n}\r\n\r\nfunction put(entityType, updatedEntity) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === updatedEntity._id)\r\n            entities.splice(idx, 1, updatedEntity)\r\n            _save(entityType, entities)\r\n            return updatedEntity\r\n        })\r\n}\r\n\r\nfunction remove(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === entityId)\r\n            entities.splice(idx, 1)\r\n            _save(entityType, entities)\r\n        })\r\n}\r\n\r\n\r\nfunction _save(entityType, entities) {\r\n    localStorage.setItem(entityType, JSON.stringify(entities))\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = ''\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text\r\n}"],"mappings":"AACA,OAAO,MAAMA,cAAc,GAAG;EAC1BC,KAAK;EACLC,GAAG;EACHC,IAAI;EACJC,GAAG;EACHC;AACJ,CAAC;AACDJ,KAAK,EAAE;AACP,SAASA,KAAK,CAACK,UAAU,EAAEC,QAAQ,EAAE;EACjC;EACA,IAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,UAAU,CAAC,CAAC,IAAI,EAAE;EACjE;EACA;EACA;EACA;EACA,OAAOO,OAAO,CAACC,OAAO,CAACN,QAAQ,CAAC;AACpC;AAEA,SAASN,GAAG,CAACI,UAAU,EAAES,QAAQ,EAAE;EAC/B,OAAOd,KAAK,CAACK,UAAU,CAAC,CACnBU,IAAI,CAACR,QAAQ,IAAIA,QAAQ,CAACS,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,GAAG,KAAKJ,QAAQ,CAAC,CAAC;AAC3E;AAEA,SAASZ,IAAI,CAACG,UAAU,EAAEc,SAAS,EAAE;EACjCA,SAAS,CAACD,GAAG,GAAGE,OAAO,EAAE;EACzB,OAAOpB,KAAK,CAACK,UAAU,CAAC,CACnBU,IAAI,CAACR,QAAQ,IAAI;IACdA,QAAQ,CAACc,IAAI,CAACF,SAAS,CAAC;IACxBG,KAAK,CAACjB,UAAU,EAAEE,QAAQ,CAAC;IAC3B,OAAOY,SAAS;EACpB,CAAC,CAAC;AACV;AAEA,SAAShB,GAAG,CAACE,UAAU,EAAEkB,aAAa,EAAE;EACpC,OAAOvB,KAAK,CAACK,UAAU,CAAC,CACnBU,IAAI,CAACR,QAAQ,IAAI;IACd,MAAMiB,GAAG,GAAGjB,QAAQ,CAACkB,SAAS,CAACR,MAAM,IAAIA,MAAM,CAACC,GAAG,KAAKK,aAAa,CAACL,GAAG,CAAC;IAC1EX,QAAQ,CAACmB,MAAM,CAACF,GAAG,EAAE,CAAC,EAAED,aAAa,CAAC;IACtCD,KAAK,CAACjB,UAAU,EAAEE,QAAQ,CAAC;IAC3B,OAAOgB,aAAa;EACxB,CAAC,CAAC;AACV;AAEA,SAASnB,MAAM,CAACC,UAAU,EAAES,QAAQ,EAAE;EAClC,OAAOd,KAAK,CAACK,UAAU,CAAC,CACnBU,IAAI,CAACR,QAAQ,IAAI;IACd,MAAMiB,GAAG,GAAGjB,QAAQ,CAACkB,SAAS,CAACR,MAAM,IAAIA,MAAM,CAACC,GAAG,KAAKJ,QAAQ,CAAC;IACjEP,QAAQ,CAACmB,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACvBF,KAAK,CAACjB,UAAU,EAAEE,QAAQ,CAAC;EAC/B,CAAC,CAAC;AACV;AAGA,SAASe,KAAK,CAACjB,UAAU,EAAEE,QAAQ,EAAE;EACjCG,YAAY,CAACiB,OAAO,CAACtB,UAAU,EAAEG,IAAI,CAACoB,SAAS,CAACrB,QAAQ,CAAC,CAAC;AAC9D;AAEA,SAASa,OAAO,GAAa;EAAA,IAAZS,MAAM,uEAAG,CAAC;EACvB,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,QAAQ,GAAG,gEAAgE;EAC/E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC7BF,IAAI,IAAIC,QAAQ,CAACE,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,QAAQ,CAACF,MAAM,CAAC,CAAC;EACxE;EACA,OAAOC,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}